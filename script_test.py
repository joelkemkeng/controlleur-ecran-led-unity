import gzip
import struct

# Le message binaire (tronqu√© ici pour l'exemple)
data = b'eHuB\x01\x01A\x00\x1f\x02\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\n\x01\x08\x02\xf7\xfd\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00d\x00\x03\x01f\x01\x04\x01\x90\x01\x06\x02\x92\x02\x07\x02\xbc\x02\t\x03\xbe\x03\n\x03\xe8\x03\x0c\x04\xea\x04\r\x04\x14\x05\x0f\x05\x16\x06\x10\x05@\x06\x12\x06B\x07\x13\x06l\x07\x15\x07n\x08\x16\x07\x98\x08\x18\x08\x9a\t\x19\x08\xc4\t\x1b\t\xc6\n\x1c\t\xf0\n\x1e\n\xf2\x0b\x1f\n\x1c\x0c!\x0b\x1e\r"\x0bH\r$\x0cJ\x0e%\x0ct\x0e\'\rv\x0f(\r\xa0\x0f*\x0e\xa2\x10+\x0e\xcc\x10-\x0f\xce\x11.\x0f\xf8\x110\x10\xfa\x121\x10\xec\x133\x11\xee\x144\x11\x18\x156\x12\x1a\x167\x12D\x169\x13F\x17:\x13p\x17<\x14r\x18=\x14\x9c\x18?\x15\x9e\x19@\x15\xc8\x19B\x16\xca\x1aC\x16\xf4\x1aE\x17\xf6\x1bF\x17 \x1cH\x18"\x1dI\x18L\x1dK\x19N\x1eL\x19x\x1eN\x1az\x1fO\x1a\xa4\x1fQ\x1b\xa6 R\x1b\xd0 T\x1c\xd2!U\x1c\xfc!W\x1d\xfe"X\x1d(#Z\x1e*$[\x1eT$]\x1fV%^\x1f\x80%` \x82&a t\'c!v(d!\xa0(f"\xa2)g"\xcc)i#\xce*j#\xf8*l$\xfa+m$$,o%&-p%P-r&R.s&|.u\'~/v\'\xa8/x(\xaa0y(\xd40{)\xd61|)\x002~*\x023\x7f*,3\x81+.4\x82+X4\x84,Z5\x85,\x845\x87-\x866\x88-\xb06\x8a.\xb27\x8b.\xdc7\x8d/\xde8\x8e/\x089\x900\n:\x910\xfc:\x931\xfe;\x941(<\x962*=\x972T=\x993V>\x9a3\x80>\x9c4\x82?\x9d4\xac?\x9f5\xae@\xa05\xd8@\xa26\xdaA\xa36\x04B\xa57\x06C\xa670C\xa882D\xa98\\D\xab9^E\xac9\x88E\xae:\x8aF\xaf:\xb4F\xb1;\xb6G\xb2;\xe0G\xb4<\xe2H\xb5<\x0cI\xb7=\x0eJ\xb8=8J\xba>:K\xbb>dK\xbd?fL\xbe?\x90L\xc0@\x92M)\xa8\xd5\xfe\x08\x02\x00\x00'

header_size = 10
payload = data[header_size:]
decompressed = gzip.decompress(payload)

for i in range(20):
    offset = i * 8
    plage = decompressed[offset:offset+8]
    payload_start, entity_start, payload_end, entity_end = struct.unpack('<HHHH', plage)
    print(f"{i+1:2d} | {payload_start:4d} | {entity_start:5d} | {payload_end:4d} | {entity_end:5d}")